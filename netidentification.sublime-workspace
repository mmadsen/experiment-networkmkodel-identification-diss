{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"file",
				"file_to_copy"
			],
			[
				"seriation",
				"seriationtype"
			],
			[
				"input",
				"inputdirectory"
			],
			[
				"bas",
				"basicConfig"
			],
			[
				"todo",
				"todo{text}	todonotes"
			],
			[
				"clear",
				"cleardoublepage	latex-document"
			],
			[
				"subse",
				"subsection{title}	latex-document"
			],
			[
				"end",
				"end{enumerate}	chapter-ct-seriation-framework.tex"
			],
			[
				"boot",
				"bootstrapdebug"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#!/usr/bin/env python\n\nimport logging as log\nimport argparse\nimport shutil\nimport os\nimport fnmatch\nimport sys\n\ndef setup():\n    global args\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--experiment\", help=\"provide name for experiment, which is also taken to be the base input directory\", required=True)\n    parser.add_argument(\"--debug\", help=\"turn on debugging output\")\n    parser.add_argument(\"--label\", help=\"classification label, also will become directory name\")\n    parser.add_argument(\"--outputdirectory\", help=\"base directory where each seriation output for each label is written\")\n    parser.add_argument(\"--dryrun\", default=0, type=int, help=\"flag to perform a dry run and show which files will be copied\")\n    parser.add_argument(\"--overwrite\", default=0, type=int, help=\"flag to force removal and overwriting of the output directory if it already exists\")\n    parser.add_argument(\"--seriationtype\", default=\"continuity\", choices=['continuity', 'frequency'])\n\n    args = parser.parse_args()\n\n    if args.debug == '1':\n        log.basicConfig(level=log.DEBUG, format='%(asctime)s %(levelname)s: %(message)s')\n    elif args.debug is None:\n        log.basicConfig(level=log.INFO, format='%(asctime)s %(levelname)s: %(message)s')\n    else:\n        log.basicConfig(level=log.INFO, format='%(asctime)s %(levelname)s: %(message)s')\n\n\ndef clean_output_directory(dir):\n	\"\"\"\n	Remove all files from the output directory, to prepare for copying.  \n	\"\"\"\n	log.info(\"UNIMPLEMENTED - clean_output_directory\")\n\n\n\ndef main():\n\n	outdir = args.outputdirectory + \"/\" + args.label\n	log.info(\"Copying seriation output for label '%s' to directory %s\", args.label, outdir)\n\n	indir = args.experiment + \"/data/seriation-output\"\n	log.info(\"Source of seriation output: %s\", indir)\n\n	if args.dryrun == 1:\n		log.info(\"DRY RUN - exiting\")\n		sys.exit(0)\n\n	# create the output directory if needed, \n	try:\n		os.mkdir(outdir)\n	except OSError:\n		if args.overwrite == 1:\n			clean_output_directory(outdir)\n		else:\n			log.error(\"Output directory exists, --overwrite flag not given, exiting\")\n			sys.exit(1)\n\n\n	# the seriation output is in a series of subdirectories\n\n	# filespec to watch for:\n	fspec = \"*-filtered-minmax-by-weight-\"\n	fspec += args.seriationtype\n	fspec += \".gml\"\n\n	log.info(\"Copying files with filename spec: %s\", fspec)\n\n	for f in os.listdir(indir):\n		curfile = indir + \"/\" + f\n		for file in os.listdir(curfile):\n			if fnmatch.fnmatch(file, fspec):\n				file_to_copy = indir + \"/\" + f + \"/\" + file\n				shutil.copy(file_to_copy, outdir)\n\n\n\nif __name__ == \"__main__\":\n    setup()\n    main()\n\n\n\n",
			"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/bin/copy-seriation-output-for-classification.py",
			"file_size": 2600,
			"file_write_time": 131075430170000000,
			"settings":
			{
				"buffer_size": 2600,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/bin/sh\n\nset -o errexit\n\nmkdir -p data/sampled-traits\nmkdir -p data/assemblage-sampled\nmkdir -p data/filtered-data\n\n######## Sample exported datafiles to create synthetic assemblages of 500 artifacts each #########\n\n# echo \"==================== resample exported data files =====================\"\n\n\n# seriationct-simulation-resample-builder.py --inputdirectory data/exported-data \\\n#     --experiment ni-pnn-1000 \\\n#     --outputdirectory data/sampled-traits \\\n#     --jobdirectory jobs \\\n#     --samplesize 500 \\\n#     --debug 0 \\\n#     --dropthreshold 0.01 \\\n#     --parallelism 100\n\n\n# for d in `ls jobs/resamplejob*.sh`\n# do\n#         qsub -V -cwd $d\n# done\n\n# # just a default value, but this is often what we run at a time given core count\n# count=10\n\n# while [ $count -ne 0 ]\n# do\n# 	sleep 60\n# 	count=`qstat | wc -l`\n# 	echo \"still $count exports running in gridengine\"\n# done\n\n# echo \"...resampling assemblages complete...\"\n\n\n######## Sample assemblages to pull one assemblage per time interval, with no overlap ########\n\necho \"==================== subsample assemblages =====================\"\n\n\nseriationct-simulation-sample-assemblages-builder.py --inputdirectory data/sampled-traits \\\n    --experiment ni-pnn-1000 \\\n    --outputdirectory data/assemblage-sampled \\\n    --sampletype slicestratified \\\n    --numsamples 1 \\\n    --samplefraction 0.1 \\\n    --debug 0 \\\n    --jobdirectory jobs \\\n    --parallelism 100\n\n\nfor d in `ls jobs/assemsamplejob*.sh`\ndo\n        qsub -V -cwd $d\ndone\n\n# just a default value, but this is often what we run at a time given core count\ncount=10\n\nwhile [ $count -ne 0 ]\ndo\n	sleep 60\n	count=`qstat | wc -l`\n	echo \"still $count exports running in gridengine\"\ndone\n\necho \"...sampling sassemblages complete...\"\n\n######## Filter slice-stratified assemblages to eliminate types with less than 3 non-zero entries #######\n\necho \"==================== filter subsampled assemblages =====================\"\n\n\n\nseriationct-simulation-filter-types-builder.py --inputdirectory data/assemblage-sampled \\\n    --experiment ni-pnn-1000 \\\n    --outputdirectory data/filtered-data \\\n    --dropthreshold 0.10 \\\n    --filtertype onlynonzero \\\n    --minnonzero 3 \\\n    --debug 0 \\\n    --jobdirectory jobs \\\n    --parallelism 100\n\nfor d in `ls jobs/filterjob*.sh`\ndo\n        qsub -V -cwd $d\ndone\n\n# just a default value, but this is often what we run at a time given core count\ncount=10\n\nwhile [ $count -ne 0 ]\ndo\n	sleep 60\n	count=`qstat | wc -l`\n	echo \"still $count exports running in gridengine\"\ndone\n\necho \"...filtering assemblages complete...\"\n\n\n######### Prepare seriation input with all the info needed for spatial seriation and later annotation\n\necho \"==================== finalize seriation input data  =====================\"\n\nseriationct-finalize-seriation-input.py \\\n    --experiment ni-pnn-1000 \\\n    --inputdirectory data/filtered-data \\\n    --debug 0\n\n\n\necho \"=========== POSTPROCESSING COMPLETE ==============\"",
			"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-pnn-1000/bin/simulation-postprocess-gridengine-samplesize20.sh",
			"file_size": 2941,
			"file_write_time": 131077273920000000,
			"settings":
			{
				"buffer_size": 2941,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/bin/sh\n\nset -o errexit\n\nmkdir -p data/sampled-traits\nmkdir -p data/assemblage-sampled\nmkdir -p data/filtered-data\n\n######## Sample exported datafiles to create synthetic assemblages of 500 artifacts each #########\n\n# echo \"==================== resample exported data files =====================\"\n\n\n# seriationct-simulation-resample-builder.py --inputdirectory data/exported-data \\\n#     --experiment ni-pnn-1000 \\\n#     --outputdirectory data/sampled-traits \\\n#     --jobdirectory jobs \\\n#     --samplesize 500 \\\n#     --debug 0 \\\n#     --dropthreshold 0.01 \\\n#     --parallelism 1\n\n\n# for d in `ls jobs/resamplejob*.sh`; do ( sh $d ); done\n\n\n\n######## Sample assemblages to pull one assemblage per time interval, with no overlap ########\n\necho \"==================== subsample assemblages =====================\"\n\n\nseriationct-simulation-sample-assemblages-builder.py --inputdirectory data/sampled-traits \\\n    --experiment ni-pnn-1000 \\\n    --outputdirectory data/assemblage-sampled \\\n    --sampletype slicestratified \\\n    --numsamples 1 \\\n    --samplefraction 0.1 \\\n    --debug 0 \\\n    --jobdirectory jobs \\\n    --parallelism 1\n\n\nfor d in `ls jobs/assemsamplejob*.sh`; do ( sh $d ); done\n\n######## Filter slice-stratified assemblages to eliminate types with less than 3 non-zero entries #######\n\necho \"==================== filter subsampled assemblages =====================\"\n\n\nseriationct-simulation-filter-types-builder.py --inputdirectory data/assemblage-sampled \\\n    --experiment ni-pnn-1000 \\\n    --outputdirectory data/filtered-data \\\n    --dropthreshold 0.10 \\\n    --filtertype onlynonzero \\\n    --minnonzero 3 \\\n    --debug 0 \\\n    --jobdirectory jobs \\\n    --parallelism 1\n\nfor d in `ls jobs/filterjob*.sh`; do ( sh $d ); done\n\n\n######### Prepare seriation input with all the info needed for spatial seriation and later annotation\n\necho \"==================== finalize seriation input data  =====================\"\n\nseriationct-finalize-seriation-input.py \\\n    --experiment ni-pnn-1000 \\\n    --inputdirectory data/filtered-data \\\n    --debug 0\n\n\n\n\necho \"=========== POSTPROCESSING COMPLETE ==============\"\n",
			"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-pnn-1000/bin/simulation-postprocess-samplesize20.sh",
			"file_size": 2120,
			"file_write_time": 131077274040000000,
			"settings":
			{
				"buffer_size": 2120,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/bin/sh\n\nset -o errexit\n\nmkdir -p data/sampled-traits\nmkdir -p data/assemblage-sampled\nmkdir -p data/filtered-data\n\n######## Sample exported datafiles to create synthetic assemblages of 500 artifacts each #########\n\n# echo \"==================== resample exported data files =====================\"\n\n\n# seriationct-simulation-resample-builder.py --inputdirectory data/exported-data \\\n#     --experiment ni-complete-1000 \\\n#     --outputdirectory data/sampled-traits \\\n#     --jobdirectory jobs \\\n#     --samplesize 500 \\\n#     --debug 0 \\\n#     --dropthreshold 0.01 \\\n#     --parallelism 100\n\n\n# for d in `ls jobs/resamplejob*.sh`\n# do\n#         qsub -V -cwd $d\n# done\n\n# # just a default value, but this is often what we run at a time given core count\n# count=10\n\n# while [ $count -ne 0 ]\n# do\n# 	sleep 60\n# 	count=`qstat | wc -l`\n# 	echo \"still $count exports running in gridengine\"\n# done\n\n# echo \"...resampling assemblages complete...\"\n\n\n######## Sample assemblages to pull one assemblage per time interval, with no overlap ########\n\necho \"==================== subsample assemblages =====================\"\n\n\nseriationct-simulation-sample-assemblages-builder.py --inputdirectory data/sampled-traits \\\n    --experiment ni-complete-1000 \\\n    --outputdirectory data/assemblage-sampled \\\n    --sampletype slicestratified \\\n    --numsamples 1 \\\n    --samplefraction 0.1 \\\n    --debug 0 \\\n    --jobdirectory jobs \\\n    --parallelism 100\n\n\nfor d in `ls jobs/assemsamplejob*.sh`\ndo\n        qsub -V -cwd $d\ndone\n\n# just a default value, but this is often what we run at a time given core count\ncount=10\n\nwhile [ $count -ne 0 ]\ndo\n	sleep 60\n	count=`qstat | wc -l`\n	echo \"still $count exports running in gridengine\"\ndone\n\necho \"...sampling sassemblages complete...\"\n\n######## Filter slice-stratified assemblages to eliminate types with less than 3 non-zero entries #######\n\necho \"==================== filter subsampled assemblages =====================\"\n\n\n\nseriationct-simulation-filter-types-builder.py --inputdirectory data/assemblage-sampled \\\n    --experiment ni-complete-1000 \\\n    --outputdirectory data/filtered-data \\\n    --dropthreshold 0.10 \\\n    --filtertype onlynonzero \\\n    --minnonzero 3 \\\n    --debug 0 \\\n    --jobdirectory jobs \\\n    --parallelism 100\n\nfor d in `ls jobs/filterjob*.sh`\ndo\n        qsub -V -cwd $d\ndone\n\n# just a default value, but this is often what we run at a time given core count\ncount=10\n\nwhile [ $count -ne 0 ]\ndo\n	sleep 60\n	count=`qstat | wc -l`\n	echo \"still $count exports running in gridengine\"\ndone\n\necho \"...filtering assemblages complete...\"\n\n\n######### Prepare seriation input with all the info needed for spatial seriation and later annotation\n\necho \"==================== finalize seriation input data  =====================\"\n\nseriationct-finalize-seriation-input.py \\\n    --experiment ni-complete-1000 \\\n    --inputdirectory data/filtered-data \\\n    --debug 0\n\n\n\necho \"=========== POSTPROCESSING COMPLETE ==============\"\n",
			"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/bin/simulation-postprocess-gridengine-samplesize20.sh",
			"file_size": 2962,
			"file_write_time": 131077277430000000,
			"settings":
			{
				"buffer_size": 2962,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/bin/sh\n\nset -o errexit\n\nmkdir -p data/sampled-traits\nmkdir -p data/assemblage-sampled\nmkdir -p data/filtered-data\n\n######## Sample exported datafiles to create synthetic assemblages of 500 artifacts each #########\n\n# echo \"==================== resample exported data files =====================\"\n\n\n# seriationct-simulation-resample-builder.py --inputdirectory data/exported-data \\\n#     --experiment ni-complete-1000 \\\n#     --outputdirectory data/sampled-traits \\\n#     --jobdirectory jobs \\\n#     --samplesize 500 \\\n#     --debug 0 \\\n#     --dropthreshold 0.01 \\\n#     --parallelism 1\n\n\n# for d in `ls jobs/resamplejob*.sh`; do ( sh $d ); done\n\n\n\n######## Sample assemblages to pull one assemblage per time interval, with no overlap ########\n\necho \"==================== subsample assemblages =====================\"\n\n\nseriationct-simulation-sample-assemblages-builder.py --inputdirectory data/sampled-traits \\\n    --experiment ni-complete-1000 \\\n    --outputdirectory data/assemblage-sampled \\\n    --sampletype slicestratified \\\n    --numsamples 1 \\\n    --samplefraction 0.1 \\\n    --debug 0 \\\n    --jobdirectory jobs \\\n    --parallelism 1\n\n\nfor d in `ls jobs/assemsamplejob*.sh`; do ( sh $d ); done\n\n######## Filter slice-stratified assemblages to eliminate types with less than 3 non-zero entries #######\n\necho \"==================== filter subsampled assemblages =====================\"\n\n\nseriationct-simulation-filter-types-builder.py --inputdirectory data/assemblage-sampled \\\n    --experiment ni-complete-1000 \\\n    --outputdirectory data/filtered-data \\\n    --dropthreshold 0.10 \\\n    --filtertype onlynonzero \\\n    --minnonzero 3 \\\n    --debug 0 \\\n    --jobdirectory jobs \\\n    --parallelism 1\n\nfor d in `ls jobs/filterjob*.sh`; do ( sh $d ); done\n\n\n######### Prepare seriation input with all the info needed for spatial seriation and later annotation\n\necho \"==================== finalize seriation input data  =====================\"\n\nseriationct-finalize-seriation-input.py \\\n    --experiment ni-complete-1000 \\\n    --inputdirectory data/filtered-data \\\n    --debug 0\n\n\n\n\necho \"=========== POSTPROCESSING COMPLETE ==============\"\n",
			"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/bin/simulation-postprocess-samplesize20.sh",
			"file_size": 2140,
			"file_write_time": 131077277630000000,
			"settings":
			{
				"buffer_size": 2140,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/bin/sh\n\nset -o errexit\n\nmkdir -p data/sampled-traits\nmkdir -p data/assemblage-sampled\nmkdir -p data/filtered-data\n\n######## Sample exported datafiles to create synthetic assemblages of 500 artifacts each #########\n\necho \"==================== resample exported data files =====================\"\n\n\nseriationct-simulation-resample-builder.py --inputdirectory data/exported-data \\\n    --experiment ni-complete-1000 \\\n    --outputdirectory data/sampled-traits \\\n    --jobdirectory jobs \\\n    --samplesize 500 \\\n    --debug 0 \\\n    --dropthreshold 0.01 \\\n    --parallelism 100\n\n\nfor d in `ls jobs/resamplejob*.sh`\ndo\n        qsub -V -cwd $d\ndone\n\n# just a default value, but this is often what we run at a time given core count\ncount=10\n\nwhile [ $count -ne 0 ]\ndo\n	sleep 60\n	count=`qstat | wc -l`\n	echo \"still $count exports running in gridengine\"\ndone\n\necho \"...resampling assemblages complete...\"\n\n\n######## Sample assemblages to pull one assemblage per time interval, with no overlap ########\n\necho \"==================== subsample assemblages =====================\"\n\n\nseriationct-simulation-sample-assemblages-builder.py --inputdirectory data/sampled-traits \\\n    --experiment ni-complete-1000 \\\n    --outputdirectory data/assemblage-sampled \\\n    --sampletype slicestratified \\\n    --numsamples 1 \\\n    --samplefraction 0.05 \\\n    --debug 0 \\\n    --jobdirectory jobs \\\n    --parallelism 100\n\nseriationct-simulation-sample-assemblages-builder.py --inputdirectory data/sampled-traits \\\n    --experiment ni-complete-1000 \\\n    --outputdirectory data/assemblage-sampled \\\n    --sampletype slicestratified \\\n    --numsamples 1 \\\n    --samplefraction 0.1 \\\n    --debug 0 \\\n    --jobdirectory jobs \\\n    --parallelism 100\n\nseriationct-simulation-sample-assemblages-builder.py --inputdirectory data/sampled-traits \\\n    --experiment ni-complete-1000 \\\n    --outputdirectory data/assemblage-sampled \\\n    --sampletype slicestratified \\\n    --numsamples 1 \\\n    --samplefraction 0.15 \\\n    --debug 0 \\\n    --jobdirectory jobs \\\n    --parallelism 100\n\n\nfor d in `ls jobs/assemsamplejob*.sh`\ndo\n        qsub -V -cwd $d\ndone\n\n# just a default value, but this is often what we run at a time given core count\ncount=10\n\nwhile [ $count -ne 0 ]\ndo\n	sleep 60\n	count=`qstat | wc -l`\n	echo \"still $count exports running in gridengine\"\ndone\n\necho \"...sampling sassemblages complete...\"\n\n######## Filter slice-stratified assemblages to eliminate types with less than 3 non-zero entries #######\n\necho \"==================== filter subsampled assemblages =====================\"\n\n\n\nseriationct-simulation-filter-types-builder.py --inputdirectory data/assemblage-sampled \\\n    --experiment ni-complete-1000 \\\n    --outputdirectory data/filtered-data \\\n    --dropthreshold 0.10 \\\n    --filtertype onlynonzero \\\n    --minnonzero 3 \\\n    --debug 0 \\\n    --jobdirectory jobs \\\n    --parallelism 300\n\nfor d in `ls jobs/filterjob*.sh`\ndo\n        qsub -V -cwd $d\ndone\n\n# just a default value, but this is often what we run at a time given core count\ncount=10\n\nwhile [ $count -ne 0 ]\ndo\n	sleep 60\n	count=`qstat | wc -l`\n	echo \"still $count exports running in gridengine\"\ndone\n\necho \"...filtering assemblages complete...\"\n\n\n######### Prepare seriation input with all the info needed for spatial seriation and later annotation\n\necho \"==================== finalize seriation input data  =====================\"\n\nseriationct-finalize-seriation-input.py \\\n    --experiment ni-complete-1000 \\\n    --inputdirectory data/filtered-data \\\n    --debug 0\n\n\n\necho \"=========== POSTPROCESSING COMPLETE ==============\"\n",
			"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/bin/simulation-postprocess-gridengine.sh",
			"file_size": 3568,
			"file_write_time": 131077304450000000,
			"settings":
			{
				"buffer_size": 3568,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/bin/sh\n\nset -o errexit\n\nmkdir -p data/seriation-output\n\n### EDIT PARALLELISM to match the parallelism chosen in build-simulations.sh given the number of simulations,\n### or to match the number of post processing output files if this multiplies over the number of simulations.\n\nseriationct-seriation-builder.py --inputdirectory data/filtered-data \\\n	--outputdirectory data/seriation-output \\\n	--dobootstrapsignificance 1 \\\n	--frequency 0 \\\n	--continuity 1 \\\n	--experiment ni-complete-1000 \\\n	--jobdirectory jobs \\\n	--parallelism 300 \\\n	--debug 0\n\n\n",
			"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/bin/build-seriations.sh",
			"file_size": 550,
			"file_write_time": 131077304620000000,
			"settings":
			{
				"buffer_size": 550,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/bin/sh\n\nset -o errexit\n\nmkdir -p data/sampled-traits\nmkdir -p data/assemblage-sampled\nmkdir -p data/filtered-data\n\n######## Sample exported datafiles to create synthetic assemblages of 500 artifacts each #########\n\necho \"==================== resample exported data files =====================\"\n\n\nseriationct-simulation-resample-builder.py --inputdirectory data/exported-data \\\n    --experiment ni-complete-1000 \\\n    --outputdirectory data/sampled-traits \\\n    --jobdirectory jobs \\\n    --samplesize 500 \\\n    --debug 0 \\\n    --dropthreshold 0.01 \\\n    --parallelism 1\n\n\nfor d in `ls jobs/resamplejob*.sh`; do ( sh $d ); done\n\n\n\n######## Sample assemblages to pull one assemblage per time interval, with no overlap ########\n\necho \"==================== subsample assemblages =====================\"\n\n\nseriationct-simulation-sample-assemblages-builder.py --inputdirectory data/sampled-traits \\\n    --experiment ni-complete-1000 \\\n    --outputdirectory data/assemblage-sampled \\\n    --sampletype slicestratified \\\n    --numsamples 1 \\\n    --samplefraction 0.05 \\\n    --debug 0 \\\n    --jobdirectory jobs \\\n    --parallelism 1\n\nseriationct-simulation-sample-assemblages-builder.py --inputdirectory data/sampled-traits \\\n    --experiment ni-complete-1000 \\\n    --outputdirectory data/assemblage-sampled \\\n    --sampletype slicestratified \\\n    --numsamples 1 \\\n    --samplefraction 0.1 \\\n    --debug 0 \\\n    --jobdirectory jobs \\\n    --parallelism 1\n\nseriationct-simulation-sample-assemblages-builder.py --inputdirectory data/sampled-traits \\\n    --experiment ni-complete-1000 \\\n    --outputdirectory data/assemblage-sampled \\\n    --sampletype slicestratified \\\n    --numsamples 1 \\\n    --samplefraction 0.15 \\\n    --debug 0 \\\n    --jobdirectory jobs \\\n    --parallelism 1\n\n\nfor d in `ls jobs/assemsamplejob*.sh`; do ( sh $d ); done\n\n######## Filter slice-stratified assemblages to eliminate types with less than 3 non-zero entries #######\n\necho \"==================== filter subsampled assemblages =====================\"\n\n\nseriationct-simulation-filter-types-builder.py --inputdirectory data/assemblage-sampled \\\n    --experiment ni-complete-1000 \\\n    --outputdirectory data/filtered-data \\\n    --dropthreshold 0.10 \\\n    --filtertype onlynonzero \\\n    --minnonzero 3 \\\n    --debug 0 \\\n    --jobdirectory jobs \\\n    --parallelism 1\n\nfor d in `ls jobs/filterjob*.sh`; do ( sh $d ); done\n\n\n######### Prepare seriation input with all the info needed for spatial seriation and later annotation\n\necho \"==================== finalize seriation input data  =====================\"\n\nseriationct-finalize-seriation-input.py \\\n    --experiment ni-complete-1000 \\\n    --inputdirectory data/filtered-data \\\n    --debug 0\n\n\n\n\necho \"=========== POSTPROCESSING COMPLETE ==============\"\n",
			"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/bin/simulation-postprocess.sh",
			"file_size": 2766,
			"file_write_time": 131077305140000000,
			"settings":
			{
				"buffer_size": 2766,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-pnn-1000/runall.sh",
			"settings":
			{
				"buffer_size": 416,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/bin/sh\n\nset -o errexit\n\nmkdir -p data/sampled-traits\nmkdir -p data/assemblage-sampled\nmkdir -p data/filtered-data\n\n######## Sample exported datafiles to create synthetic assemblages of 500 artifacts each #########\n\necho \"==================== resample exported data files =====================\"\n\n\nseriationct-simulation-resample-builder.py --inputdirectory data/exported-data \\\n    --experiment ni-pnn-1000 \\\n    --outputdirectory data/sampled-traits \\\n    --jobdirectory jobs \\\n    --samplesize 500 \\\n    --debug 0 \\\n    --dropthreshold 0.01 \\\n    --parallelism 100\n\n\nfor d in `ls jobs/resamplejob*.sh`\ndo\n        qsub -V -cwd $d\ndone\n\n# just a default value, but this is often what we run at a time given core count\ncount=10\n\nwhile [ $count -ne 0 ]\ndo\n	sleep 60\n	count=`qstat | wc -l`\n	echo \"still $count exports running in gridengine\"\ndone\n\necho \"...resampling assemblages complete...\"\n\n\n######## Sample assemblages to pull one assemblage per time interval, with no overlap ########\n\necho \"==================== subsample assemblages =====================\"\n\n\nseriationct-simulation-sample-assemblages-builder.py --inputdirectory data/sampled-traits \\\n    --experiment ni-pnn-1000 \\\n    --outputdirectory data/assemblage-sampled \\\n    --sampletype slicestratified \\\n    --numsamples 1 \\\n    --samplefraction 0.05 \\\n    --debug 0 \\\n    --jobdirectory jobs \\\n    --parallelism 100\n\nseriationct-simulation-sample-assemblages-builder.py --inputdirectory data/sampled-traits \\\n    --experiment ni-pnn-1000 \\\n    --outputdirectory data/assemblage-sampled \\\n    --sampletype slicestratified \\\n    --numsamples 1 \\\n    --samplefraction 0.1 \\\n    --debug 0 \\\n    --jobdirectory jobs \\\n    --parallelism 100\n\nseriationct-simulation-sample-assemblages-builder.py --inputdirectory data/sampled-traits \\\n    --experiment ni-pnn-1000 \\\n    --outputdirectory data/assemblage-sampled \\\n    --sampletype slicestratified \\\n    --numsamples 1 \\\n    --samplefraction 0.15 \\\n    --debug 0 \\\n    --jobdirectory jobs \\\n    --parallelism 100\n\nfor d in `ls jobs/assemsamplejob*.sh`\ndo\n        qsub -V -cwd $d\ndone\n\n# just a default value, but this is often what we run at a time given core count\ncount=10\n\nwhile [ $count -ne 0 ]\ndo\n	sleep 60\n	count=`qstat | wc -l`\n	echo \"still $count exports running in gridengine\"\ndone\n\necho \"...sampling sassemblages complete...\"\n\n######## Filter slice-stratified assemblages to eliminate types with less than 3 non-zero entries #######\n\necho \"==================== filter subsampled assemblages =====================\"\n\n\n\nseriationct-simulation-filter-types-builder.py --inputdirectory data/assemblage-sampled \\\n    --experiment ni-pnn-1000 \\\n    --outputdirectory data/filtered-data \\\n    --dropthreshold 0.10 \\\n    --filtertype onlynonzero \\\n    --minnonzero 3 \\\n    --debug 0 \\\n    --jobdirectory jobs \\\n    --parallelism 300\n\nfor d in `ls jobs/filterjob*.sh`\ndo\n        qsub -V -cwd $d\ndone\n\n# just a default value, but this is often what we run at a time given core count\ncount=10\n\nwhile [ $count -ne 0 ]\ndo\n	sleep 60\n	count=`qstat | wc -l`\n	echo \"still $count exports running in gridengine\"\ndone\n\necho \"...filtering assemblages complete...\"\n\n\n######### Prepare seriation input with all the info needed for spatial seriation and later annotation\n\necho \"==================== finalize seriation input data  =====================\"\n\nseriationct-finalize-seriation-input.py \\\n    --experiment ni-pnn-1000 \\\n    --inputdirectory data/filtered-data \\\n    --debug 0\n\n\n\necho \"=========== POSTPROCESSING COMPLETE ==============\"",
			"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-pnn-1000/bin/simulation-postprocess-gridengine.sh",
			"file_size": 3536,
			"file_write_time": 131077306600000000,
			"settings":
			{
				"buffer_size": 3536,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/bin/sh\n\nset -o errexit\n\nmkdir -p data/seriation-output\n\n### EDIT PARALLELISM to match the parallelism chosen in build-simulations.sh given the number of simulations,\n### or to match the number of post processing output files if this multiplies over the number of simulations.\n\nseriationct-seriation-builder.py --inputdirectory data/filtered-data \\\n	--outputdirectory data/seriation-output \\\n	--dobootstrapsignificance 1 \\\n	--frequency 0 \\\n	--continuity 1 \\\n	--experiment ni-pnn-1000 \\\n	--jobdirectory jobs \\\n	--parallelism 300 \\\n	--debug 0\n\n\n",
			"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-pnn-1000/bin/build-seriations.sh",
			"file_size": 545,
			"file_write_time": 131077306710000000,
			"settings":
			{
				"buffer_size": 545,
				"line_ending": "Unix"
			}
		},
		{
			"file": "netidentification.sublime-project",
			"settings":
			{
				"buffer_size": 45,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/bin/sh\n\n# exit if any of the subcommands returns an error, since they only work if the preceding command succeeded\nset -e\nset -o errexit\n\nsh bin/build-networkmodel.sh\n\nsh bin/build-simulations.sh\nsh bin/run-simulations-gridengine.sh\n\nsh bin/export-data-gridengine.sh\nsh bin/simulation-postprocess-gridengine.sh\n\nsh bin/build-seriations.sh\nsh bin/run-seriations-gridengine.sh\n\nsh bin/annotate-seriation-output.sh\n",
			"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/runall.sh",
			"file_size": 415,
			"file_write_time": 131077306160000000,
			"settings":
			{
				"buffer_size": 415,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "pack",
		"selected_items":
		[
			[
				"pack",
				"Package Control: Upgrade Package"
			],
			[
				"Snippet: ",
				"Snippet: Enumerate"
			],
			[
				"Pack",
				"Package Control: Upgrade Package"
			],
			[
				"Package",
				"Package Control: Install Package"
			],
			[
				"Packag",
				"Package Control: Install Package"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/mark/local-research/diss/experiments/experiment-networkmkodel-identification-diss"
	],
	"file_history":
	[
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-pnn-1000/runall.sh",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-pnn-1000/bin/run-seriations-gridengine.sh",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-pnn-1000/bin/run-seriations.sh",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-pnn-1000/bin/build-seriations.sh",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-pnn-1000/bin/export-data-gridengine.sh",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-pnn-1000/bin/export-data.sh",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/runall.sh",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/bin/simulation-postprocess-gridengine.sh",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/bin/run-simulations-gridengine.sh",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/bin/run-seriations-gridengine.sh",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/bin/export-data-gridengine.sh",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/bin/build-simulations.sh",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/bin/build-seriations.sh",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/bin/annotate-seriation-output.sh",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/network-model-configuration-nnmodel.json",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-pnn-1000/bin/build-networkmodel.sh",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-pnn-1000/bin/build-simulations.sh",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-pnn-1000/bin/run-simulations-gridengine.sh",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-pnn-1000/bin/simulation-postprocess-gridengine.sh",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/.gitignore",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/README.md",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/bin/build-networkmodel.sh",
		"/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/bin/copy-seriation-output-for-classification.py",
		"/Users/mark/tmp/testsct/bin/build-networkmodel.sh",
		"/Users/mark/tmp/testsct/bin/simulation-postprocess.sh",
		"/Users/mark/tmp/testsct/bin/annotate-seriation-output.sh",
		"/Users/mark/tmp/testsct/bin/build-simulations.sh",
		"/Users/mark/Dropbox/Research/projects/coarsegraining/experiment-ctmixtures/paper/madsen2015-ctmixtures.tex",
		"/Users/mark/Dropbox/Research/projects/coarsegraining/experiment-ctmixtures/paper/madsen2015-ctmixtures-original.tex",
		"/Users/mark/Dropbox/Research/projects/coarsegraining/experiment-ctmixtures/paper/notes.txt",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/dissertation-glossary.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/graphics/fig-seriationct-highlevel.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/diss-macros.sty",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/objects/slice-002.gml.txt",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/objects/slice-001.gml.txt",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/outlines/outline-cg-ct-theory.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/madsen-dissertation.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/chapters/chapter-cg-ct-theory.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/chapters/chapter-introduction.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/chapters/chapter-research-questions.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/chapter-structure.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/chapterdrafts/chapter-draft-historical-perspective.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/chapterdrafts/chapter-draft-ct-seriation-framework.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/chapterdrafts/chapter-draft-ct-models.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/setup/preamble.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/frontbackmatter/front.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/objects/seriationct-runbuilder-example.sh",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/tables/seriationct-simulation-parameters.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/graphics/fig-interval-temporal-network.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/objects/runbuilder-job-output-example.sh",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/graphics/fig-simple-temporal-network-example-gml.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/frontbackmatter/back.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/codeexamples/tn-slice-002.gml",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/codeexamples/tn-slice-001.gml",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/chapters/chapter-ct-seriation-framework.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/frontbackmatter/vita.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/chapters/chapter-seriation-as-observation.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/setup/fonts.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/chapters/chapter-model-verification.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/chapters/chapter-ct-models.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/chapters/chapter-experiments.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/chapters/chapter-future-research.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/chapters/chapter-historical-perspective.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/chapters/chapter-seriation-results.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/chapters/chapter-simulation-model-descriptions.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/chapters/chapter-classification-results.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/chapters/chapter-conclusions.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/chapter-structure-new.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/Makefile",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/outlines/outline-introduction.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/notes/notes-lineage-scale-introduction.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/setup/defines.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/dissertation-outline.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/content/outlines/cg-ct-theory.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/content/chapter-cg-ct-theory.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/content/chapter-classification-results.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/content/chapter-conclusions.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/content/chapter-ct-models.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/content/chapter-future-research.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/content/chapter-historical-perspective.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/content/outlines/introduction-outline.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/content/chapter-introduction.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/content/chapter-model-verification.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/content/chapter-outline-experiments.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/content/chapter-research-questions.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/content/chapter-seriation-as-observation.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/content/chapter-seriation-results.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/content/chapter-simulation-model-descriptions.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/content/chapter-tf-documentation.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/outlinedrafts/chapter-outline-introduction.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/madsen-dissertation.log",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/outlinedrafts/chapter-outline-cg-ct-theory.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/content/outlines/historical-perspective-outline.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/outlinedrafts/chapter-outline-historical-perspective.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/frontbackmatter/title.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation/frontbackmatter/copyright.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation-draft/content/chapter-ct-theory.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation-draft/madsen-dissertation.tex",
		"/Users/mark/Library/Application Support/Sublime Text 3/Packages/User/build-latexmk.sublime-build",
		"/Users/mark/Dropbox/Research/manuscripts/papers/encyc-soc-beh-evolarchy/lipomadsen2014-encyc-soc-beh-evolarchy.md",
		"/Users/mark/Dropbox/Research/projects/structuredinformation/madsenlipo2014/paper/madsenlipo2014-semanticaxelrod.tex",
		"/Users/mark/Dropbox/Research/manuscripts/papers/encyc-soc-beh-evolarchy/encyclopedia-soc-beh-sci-evolutionary-approaches.md",
		"/Users/mark/Dropbox/Research/manuscripts/papers/encyc-soc-beh-evolarchy/recent-topics.md",
		"/Users/mark/Dropbox/Research/manuscripts/papers/encyc-soc-beh-evolarchy/madsenlipo2014-encyc-soc-beh-evolarchy.md",
		"/Users/mark/Library/Application Support/Sublime Text 2/Packages/Apache Pig/Pig.sublime-settings",
		"/Users/mark/local-research/diss/experiments/classification/classification-experiment/DESCRIPTION",
		"/Users/mark/Downloads/elasticsearch-0.90.5/README.textile",
		"/Users/mark/Dropbox/Research/websites/lnraw/_posts/2013-08-27-classification-research-questions.md",
		"/Users/mark/src/Ming-0.4.1/ming/session.py",
		"/Users/mark/src/Ming-0.4.1/ming/datastore.py",
		"/Users/mark/src/Ming-0.4.1/ming/base.py",
		"/Users/mark/Dropbox/Research/Dissertation Project/analysis/simulation-calculations/inst/doc/simulationcalculations/xelatex-rmarkdown-template.tex",
		"/Users/mark/Dropbox/Research/Dissertation Project/analysis/simulation-calculations/inst/doc/simulationcalculations/simulationcalculations.Rmd",
		"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/jaa-ct-issue-madsen-safi-symposium/jaa-ct-issue-madsen-safi-symposium.tex",
		"/Users/mark/Dropbox/Research/projects/reproducible/seriationcombinatorics/inst/doc/seriationcombinatorics/seriationcombinatorics.Rmd",
		"/Users/mark/Library/Application Support/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/Users/mark/Dropbox/Research/projects/reproducible/seriationcombinatorics/inst/doc/seriationcombinatorics/xelatex-rmarkdown-template.tex",
		"/Users/mark/Dropbox/Research/projects/reproducible/seriationcombinatorics/inst/doc/seriationcombinatorics/seriation-combinatorics.Rnw",
		"/Users/mark/Dropbox/Research/websites/lnraw/index.html",
		"/Users/mark/Dropbox/Research/websites/lnraw/_layouts/default.html",
		"/Users/mark/Dropbox/Research/websites/lnraw/_layouts/project_layout.html",
		"/Users/mark/Dropbox/Research/websites/lnraw/tags.html",
		"/Users/mark/Dropbox/Research/websites/lnraw/_plugins/jekyll.tag-cloud.rb",
		"/Users/mark/Dropbox/Research/websites/lnraw/openscience.html",
		"/Users/mark/Dropbox/Research/websites/lnbootstrap/index.html",
		"/Users/mark/Dropbox/Research/websites/lnbootstrap/_layouts/default.html",
		"/Users/mark/Dropbox/Research/websites/lnbootstrap/_layouts/project_layout.html",
		"/Users/mark/Dropbox/Research/websites/lnbootstrap/research.html"
	],
	"find":
	{
		"height": 25.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/Users/mark/Dropbox/Research/Dissertation Project/manuscripts/dissertation"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"IDSS",
			"\\1",
			"madsen-macros.sty",
			"cite",
			"theme_text",
			"$DEBUG",
			"DEBUG",
			"fig:pop-structure-models",
			"slat100",
			"useGlos",
			"slatbig",
			"slat100t",
			"Toma",
			"&\\\\",
			"\"",
			"ergodic"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": true,
		"regex": false,
		"replace_history":
		[
			"\\2",
			"diss-macros.sty",
			"element_text",
			"$debug",
			"\\\\ \\hline",
			"``"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"selected": 11,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/bin/copy-seriation-output-for-classification.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2600,
						"regions":
						{
						},
						"selection":
						[
							[
								2131,
								2131
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 520.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-pnn-1000/bin/simulation-postprocess-gridengine-samplesize20.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2941,
						"regions":
						{
						},
						"selection":
						[
							[
								1358,
								1358
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 338.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-pnn-1000/bin/simulation-postprocess-samplesize20.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2120,
						"regions":
						{
						},
						"selection":
						[
							[
								1068,
								1068
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 367.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/bin/simulation-postprocess-gridengine-samplesize20.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2962,
						"regions":
						{
						},
						"selection":
						[
							[
								1368,
								1368
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1115.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/bin/simulation-postprocess-samplesize20.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2140,
						"regions":
						{
						},
						"selection":
						[
							[
								1078,
								1078
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 367.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/bin/simulation-postprocess-gridengine.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3568,
						"regions":
						{
						},
						"selection":
						[
							[
								2867,
								2867
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1455.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/bin/build-seriations.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 550,
						"regions":
						{
						},
						"selection":
						[
							[
								534,
								534
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/bin/simulation-postprocess.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2766,
						"regions":
						{
						},
						"selection":
						[
							[
								1703,
								1703
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 707.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-pnn-1000/runall.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 416,
						"regions":
						{
						},
						"selection":
						[
							[
								141,
								141
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-pnn-1000/bin/simulation-postprocess-gridengine.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3536,
						"regions":
						{
						},
						"selection":
						[
							[
								2839,
								2839
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1242.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-pnn-1000/bin/build-seriations.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 545,
						"regions":
						{
						},
						"selection":
						[
							[
								527,
								527
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "netidentification.sublime-project",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 45,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/Users/mark/local-research/diss/experiments/experiment-networkmodel-identification-diss/experiments/ni-complete-1000/runall.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 415,
						"regions":
						{
						},
						"selection":
						[
							[
								377,
								377
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 293.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "netidentification.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				".Rhistory"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Dropbox/Research/websites/lnraw/lnraw.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 389.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
